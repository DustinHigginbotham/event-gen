// Code generated by event-source-gen. DO NOT EDIT.
package app

// {{.Entity.Name}}
//
// {{.Entity.Description}}
type {{.Entity.Name}} struct {
{{- range .Entity.Fields}}
{{- if eq .Type "string" }}
    {{.Name | toExported}} {{.Type | toType }} `json:"{{.Name | toLower}}"`
{{- else if eq .Type "int" }}
	{{.Name | toExported}} {{.Type | toType }} `json:"{{.Name | toLower}}"`
{{- else if eq .Type "array" }}
	{{.Name | toExported}} []{{.GoType | toExported}} `json:"{{.Name | toLower}}"`
{{- else if eq .Type "object" }}
	{{.Name | toExported}} []{{.GoType | toExported}} `json:"{{.Name | toLower}}"`
{{- end}}
{{- end}}
}

{{- range .Entity.Fields}}
{{- if eq .Type "array" }}
type {{.GoType | toExported}} struct {
{{- range .Fields}}
	{{.Name | toExported}} {{.Type}} `json:"{{.Name | toLower}}"`
{{- end}}
}
{{- end}}
{{- end}}


type {{.Entity.Name}}Builder struct {
	Manager {{.Entity.Name}}EventManager
}

func (a *{{.Entity.Name}}Builder) Create() *{{.Entity.Name}} {
	return &{{.Entity.Name}}{}
}

func (a *{{.Entity.Name}}Builder) Apply(entity *{{.Entity.Name}}, event Event) {
	switch e := event.Data.(type) {
{{- range .Events}}{{- if .State}}
	case *{{.Name}}:
		a.Manager.Handle{{.Name}}(entity, *e)
{{- end}}{{- end}}
	}
}

func (a *{{.Entity.Name}}Builder) Rebuild(events []Event) *{{.Entity.Name}} {
	e := a.Create()
	for _, event := range events {
		a.Apply(e, event)
	}
	return e
}