// Code generated by event-source-gen. DO NOT EDIT.
package app

import (
	"context"
	"fmt"
)

// {{.Name}}{{- if .Description}}
//
// {{.Description}}{{- end}}
type {{.Entity.Name}}CommandManager interface {
{{- range .Commands}}
	{{.Name}}(ctx context.Context, a *App, cmd *{{.Name}}) (*{{.Emits}}, error)
{{- end}}
}

type {{.Entity.Name}}EventManager interface {
{{- range .Events}}{{- if .State }}
	Handle{{.Name}}(a *{{$.Entity.Name}}, e {{.Name}}) error
{{- end}}{{- end}}
}

type {{.Entity.Name}}ProjectionManager interface {
{{- range .Projections }}
{{- range .ReactsTo}}
	Handle{{index $.EventMap .}}Projection(ctx context.Context, a *App, e *{{index $.EventMap .}}) error
{{- end}}
{{- end}}
}


// {{.Entity.Name}}Manager
//
// Required to implement this interface when registering the service with App.Register{{.Entity.Name}}Service
// If your interface does not have all the methods, you can create a new interface that embeds the {{.Entity.Name}}CommandManager and {{.Entity.Name}}EventManager interfaces.
// This will allow you to only implement the methods you need.
// If you need projections and workers, you can create a new interface that embeds the {{.Entity.Name}}CommandManager, {{.Entity.Name}}EventManager, and {{.Entity.Name}}ProjectionManager interfaces.
type {{.Entity.Name}}Manager interface {
	{{.Entity.Name}}CommandManager
	{{.Entity.Name}}EventManager
}

type {{.Entity.Name}}Service struct {
	app *App
	manager {{.Entity.Name}}CommandManager
}

func (a *App) Register{{.Entity.Name}}Service(service {{.Entity.Name}}Manager) {

	s := &{{.Entity.Name}}Service{
		app: a,
		manager: service,
	}

	a.{{.Entity.Name | toLower}} = s

}

{{- range .Commands}}
// {{.Name}}
//
// {{.Description}}
type {{.Name}} struct {
{{- range .Fields}}
{{- if ne .Type "array" }}
    {{.Name | toExported}} {{.Type | toType}} `json:"{{.Name | toLower}}"`
{{- else if eq .Type "array" }}
	{{.Name | toExported}} []{{.GoType | toType}} `json:"{{.Name | toLower}}"`
{{- end}}

{{- end}}
}

// {{.Name}}{{- if .Description}}
//
// {{.Description}}{{- end}}
func (s *{{$.Entity.Name}}Service) {{.Name}}(ctx context.Context, id string, cmd *{{.Name}}) error {
	event, err := s.manager.{{.Name}}(ctx, s.app, cmd)
	if err != nil {
		return fmt.Errorf("failed to {{.Name}}: %w", err)
	}

	if err := s.app.Store().Save(ctx, id, event); err != nil {
		return fmt.Errorf("failed to save event: %w", err)
	}

	s.app.Queue().Publish(ctx, event)

	return nil
}
{{- end}}